$date
	Sat Nov 07 19:03:08 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! zero $end
$var wire 1 " carry $end
$var wire 4 # Y [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % ENaccu $end
$var reg 1 & ENbuff $end
$var reg 3 ' F [2:0] $end
$var reg 1 ( clk $end
$var reg 1 ) reset $end
$scope module U1 $end
$var wire 4 * B [3:0] $end
$var wire 1 % ENaccu $end
$var wire 1 & ENbuff $end
$var wire 3 + F [2:0] $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 ! zero $end
$var wire 4 , wireY [3:0] $end
$var wire 4 - wireB [3:0] $end
$var wire 4 . wireA [3:0] $end
$var wire 1 " carry $end
$var wire 4 / Y [3:0] $end
$scope module U1 $end
$var wire 4 0 A [3:0] $end
$var wire 1 & EN $end
$var wire 4 1 Y [3:0] $end
$upscope $end
$scope module U2 $end
$var wire 1 ( clk $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var wire 4 2 D [3:0] $end
$var reg 4 3 Q [3:0] $end
$upscope $end
$scope module U3 $end
$var wire 4 4 A [3:0] $end
$var wire 4 5 B [3:0] $end
$var wire 3 6 F [2:0] $end
$var wire 1 ! Zero $end
$var wire 4 7 Y [3:0] $end
$var wire 1 " Carry $end
$var reg 5 8 Y_5 [4:0] $end
$upscope $end
$scope module U4 $end
$var wire 4 9 A [3:0] $end
$var wire 1 & EN $end
$var wire 4 : Y [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
0)
0(
bx '
x&
x%
bx $
bx #
x"
x!
$end
#1
1!
0"
b0 ,
b0 2
b0 7
b0 9
b0 8
b0 .
b0 3
b0 4
1(
1)
#2
0(
b0 $
b0 *
b0 0
0)
#3
1(
#4
0(
#5
0!
b10 ,
b10 2
b10 7
b10 9
b10 8
1(
b10 #
b10 /
b10 :
b10 -
b10 1
b10 5
b10 '
b10 +
b10 6
1%
1&
b10 $
b10 *
b10 0
#6
0(
#7
b10 .
b10 3
b10 4
b11 #
b11 /
b11 :
b11 ,
b11 2
b11 7
b11 9
b11 8
1(
b1 -
b1 1
b1 5
b11 '
b11 +
b11 6
b1 $
b1 *
b1 0
#8
0(
#9
1!
b11 .
b11 3
b11 4
b0 #
b0 /
b0 :
0"
b0 ,
b0 2
b0 7
b0 9
b0 8
1(
b11 -
b11 1
b11 5
b1 '
b1 +
b1 6
b11 $
b11 *
b11 0
#10
0!
b11 #
b11 /
b11 :
b11 ,
b11 2
b11 7
b11 9
b11 8
0(
b0 -
b0 1
b0 5
b0 '
b0 +
b0 6
b0 $
b0 *
b0 0
#11
1(
b11 '
b11 +
b11 6
#12
0(
#13
b1000 #
b1000 /
b1000 :
b1000 ,
b1000 2
b1000 7
b1000 9
b1000 8
1(
b1000 -
b1000 1
b1000 5
b10 '
b10 +
b10 6
b1000 $
b1000 *
b1000 0
#14
0(
#15
b1000 .
b1000 3
b1000 4
b111 #
b111 /
b111 :
1"
b111 ,
b111 2
b111 7
b111 9
b10111 8
1(
b1110 -
b1110 1
b1110 5
b100 '
b100 +
b100 6
b1110 $
b1110 *
b1110 0
#16
b1000 #
b1000 /
b1000 :
0"
b1000 ,
b1000 2
b1000 7
b1000 9
b1000 8
0(
b0 -
b0 1
b0 5
b0 '
b0 +
b0 6
b0 $
b0 *
b0 0
#17
1(
#18
b1001 #
b1001 /
b1001 :
1"
b1001 ,
b1001 2
b1001 7
b1001 9
b11001 8
0(
b1111 -
b1111 1
b1111 5
b1 '
b1 +
b1 6
b1111 $
b1111 *
b1111 0
#19
b1010 #
b1010 /
b1010 :
b1010 ,
b1010 2
b1010 7
b1010 9
b11010 8
b1001 .
b1001 3
b1001 4
1(
#20
0(
